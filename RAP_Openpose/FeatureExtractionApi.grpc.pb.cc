// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FeatureExtractionApi.proto

#include "FeatureExtractionApi.pb.h"
#include "FeatureExtractionApi.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* FeatureExtraction_method_names[] = {
  "/FeatureExtraction/processVideo",
};

std::unique_ptr< FeatureExtraction::Stub> FeatureExtraction::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FeatureExtraction::Stub> stub(new FeatureExtraction::Stub(channel));
  return stub;
}

FeatureExtraction::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_processVideo_(FeatureExtraction_method_names[0], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::Image>* FeatureExtraction::Stub::processVideoRaw(::grpc::ClientContext* context, ::Response* response) {
  return new ::grpc::ClientWriter< ::Image>(channel_.get(), rpcmethod_processVideo_, context, response);
}

::grpc::ClientAsyncWriter< ::Image>* FeatureExtraction::Stub::AsyncprocessVideoRaw(::grpc::ClientContext* context, ::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::Image>(channel_.get(), cq, rpcmethod_processVideo_, context, response, tag);
}

FeatureExtraction::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      FeatureExtraction_method_names[0],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< FeatureExtraction::Service, ::Image, ::Response>(
          std::mem_fn(&FeatureExtraction::Service::processVideo), this)));
}

FeatureExtraction::Service::~Service() {
}

::grpc::Status FeatureExtraction::Service::processVideo(::grpc::ServerContext* context, ::grpc::ServerReader< ::Image>* reader, ::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


